class circular_queue:
    def __init__(self,size):
        self.size=size
        self.queue=[None]*size
        self.front=self.rear=-1

    def enqueue(self,value):
        if (self.rear+1)%self.size==self.front:
            print("queue is full!")
        elif self.front==-1:
            self.front=self.rear=0
            self.queue[self.rear]=value
        else:
            self.rear= (self.rear + 1) % self.size
            self.queue[self.rear] = value
        print(f"Inserted {value}")

        # Function to remove an element from the queue
    def dequeue(self):
        if self.front == -1:
                print("Queue is Empty!")
        elif self.front == self.rear:  # Queue has only one element
                temp = self.queue[self.front]
                self.front = self.rear = -1
                return temp
        else:
            temp = self.queue[self.front]
            self.front = (self.front + 1) % self.size
            return temp

            # Display the queue

    def display(self):
        if self.front == -1:
                print("Queue is Empty!")
        elif self.rear >= self.front:
                print("Queue:", self.queue[self.front: self.rear + 1])
        else:
                print("Queue:", self.queue[self.front:], self.queue[: self.rear + 1])
# Initialize Circular Queue of size 5
size = 5
cq = circular_queue(size)

while True:
    print("\nMenu:")
    print("1. Enqueue")
    print("2. Dequeue")
    print("3. Display")
    print("4. Exit")
    choice = int(input("Enter your choice: "))

    if choice == 1:
        value = int(input("Enter value to insert: "))
        cq.enqueue(value)
    elif choice == 2:
        removed = cq.dequeue()
        if removed is not None:
            print(f"Dequeued: {removed}")
    elif choice == 3:
        cq.display()
    elif choice == 4:
        break
    else:
        print("Invalid choice! Please try again.")
