# implementation_queue_using_linked_list
class Node:
    def __init__(self, value):
        self.value = value  
        self.next = None 


class Queue:
    def __init__(self):
        self.front = None  
        self.rear = None  
    def is_empty(self):
        return self.front is None  # Queue is empty if there's no front element
    def enqueue(self, value):
        new_node = Node(value)  # Create a new node with the given value

        if self.is_empty():
            self.front = self.rear = new_node
        else:
            # If not empty, add the new node at the rear and update the rear pointer
            self.rear.next = new_node  # Link the current rear to the new node
            self.rear = new_node  # Update the rear to point to the new node

        print(f"Enqueued {value} to the queue")
    def dequeue(self):
        if self.is_empty():
            print("Queue is empty, nothing to dequeue!")
            return None

        dequeued_value = self.front.value  # Get the value of the front node
        self.front = self.front.next  # Move the front pointer to the next node

        if self.front is None:
            self.rear = None

        print(f"Dequeued {dequeued_value} from the queue")
        return dequeued_value  # Return the dequeued value

    def peek(self):
        if self.is_empty():
            print("Queue is empty, nothing to peek!")
            return None
        return self.front.value  # Return the value at the front of the queue

    
    def display(self):
        if self.is_empty():
            print("Queue is empty")
        else:
            current = self.front  # Start from the front node
            print("Queue elements:")
            while current:  # Traverse through the queue and print all elements
                print(current.value, end=" -> ")
                current = current.next
            print("None")

if __name__ == "__main__":
    queue = Queue()  # Create a queue object

    while True:
        print("\n1. Enqueue")
        print("2. Dequeue")
        print("3. Peek")
        print("4. Display Queue")
        print("5. Exit")

        choice = int(input("Enter your choice: "))

        if choice == 1:
            value = int(input("Enter the value to enqueue into the queue: "))
            queue.enqueue(value)
        elif choice == 2:
            queue.dequeue()
        elif choice == 3:
            front_value = queue.peek()
            if front_value is not None:
                print(f"Front value is: {front_value}")
        elif choice == 4:
            queue.display()
        elif choice == 5:
            print("Exiting...")
            break
        else:
            print("Invalid choice, please try again.")
